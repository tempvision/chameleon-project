{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/fire/compat/database\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\n\nfunction CreateLobbyComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Name already taken! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let CreateLobbyComponent = /*#__PURE__*/(() => {\n  class CreateLobbyComponent {\n    constructor(fb, db, router, dialogRef) {\n      this.fb = fb;\n      this.db = db;\n      this.router = router;\n      this.dialogRef = dialogRef;\n    }\n\n    ngOnInit() {\n      this.lobbyForm = this.fb.group({\n        userName: ['', Validators.required],\n        lobbyName: ['', [Validators.required]],\n        lobbyPassword: ['', Validators.required]\n      });\n      const objectRef = this.db.list('/lobbies');\n      objectRef.valueChanges().subscribe(res => {\n        this.allLobbies = res;\n      });\n    }\n\n    createLobby() {\n      var _a, _b, _c, _d, _e;\n\n      if (!this.lobbyForm.valid) {\n        return;\n      }\n\n      this.deleteOldLobbies();\n      const users = this.db.list('/users');\n      const newUserRef = users.push((_a = this.getUserName()) === null || _a === void 0 ? void 0 : _a.value); // create user\n\n      const newUserId = newUserRef.key;\n      const itemsRef = this.db.list('/lobbies');\n      this.checkIfNameIsTaken();\n\n      if (this.lobbyForm.controls['lobbyName'].errors) {\n        return;\n      }\n\n      const lobbyInfo = {\n        \"lobbyName\": (_b = this.getLobbyName()) === null || _b === void 0 ? void 0 : _b.value,\n        \"lobbyPassword\": (_c = this.getLobbyPassword()) === null || _c === void 0 ? void 0 : _c.value,\n        \"users\": [{\n          name: (_d = this.getUserName()) === null || _d === void 0 ? void 0 : _d.value,\n          userId: newUserId,\n          admin: true\n        }],\n        \"timestamp\": new Date().getTime()\n      };\n      const newPostRef = itemsRef.push(lobbyInfo); // get the ref of the newly created item\n\n      newPostRef.update(Object.assign(Object.assign({}, lobbyInfo), {\n        uniqueId: newPostRef.key // add the unique id to the new item\n\n      }));\n      sessionStorage.setItem('user', `{ \"name\": \"${(_e = this.getUserName()) === null || _e === void 0 ? void 0 : _e.value}\", \"userId\": \"${newUserId}\", \"admin\": true }`);\n      this.router.navigate(['lobby', newPostRef.key]);\n      this.dialogRef.close();\n    }\n\n    getUserName() {\n      return this.lobbyForm.get('userName');\n    }\n\n    getLobbyPassword() {\n      return this.lobbyForm.get('lobbyPassword');\n    }\n\n    getLobbyName() {\n      return this.lobbyForm.get('lobbyName');\n    }\n\n    checkIfNameIsTaken() {\n      const hasAMatch = this.allLobbies.some(el => {\n        var _a;\n\n        return el.lobbyName.toString() === ((_a = this.getLobbyName()) === null || _a === void 0 ? void 0 : _a.value);\n      });\n\n      if (hasAMatch) {\n        this.lobbyForm.controls['lobbyName'].setErrors({\n          nameTaken: true\n        });\n      } else {\n        this.lobbyForm.controls['lobbyName'].setErrors(null);\n      }\n    }\n\n    deleteOldLobbies() {\n      const millisecondsInOneDay = 86400000;\n      const currentDate = new Date().getTime();\n      const olderThenOneDay = this.allLobbies.filter(el => currentDate - el.timestamp > millisecondsInOneDay).forEach(el => {\n        this.db.list('/lobbies').remove(el.uniqueId); // delete users as well\n      });\n    }\n\n  }\n\n  CreateLobbyComponent.ɵfac = function CreateLobbyComponent_Factory(t) {\n    return new (t || CreateLobbyComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AngularFireDatabase), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatDialogRef));\n  };\n\n  CreateLobbyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateLobbyComponent,\n    selectors: [[\"app-create-lobby\"]],\n    decls: 23,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [1, \"container-centered\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"placeholder\", \"your name\", \"type\", \"text\", \"formControlName\", \"userName\"], [\"matInput\", \"\", \"placeholder\", \"lobby name\", \"type\", \"text\", \"formControlName\", \"lobbyName\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"password\", \"type\", \"password\", \"formControlName\", \"lobbyPassword\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"center-button\", 3, \"click\"]],\n    template: function CreateLobbyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Create Your Lobby\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"p\")(5, \"mat-form-field\", 2)(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Your Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"p\")(10, \"mat-form-field\", 2)(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Lobby Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 4);\n        i0.ɵɵtemplate(14, CreateLobbyComponent_mat_error_14_Template, 2, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"p\")(16, \"mat-form-field\", 2)(17, \"mat-label\");\n        i0.ɵɵtext(18, \"Lobby Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(20, \"hr\");\n        i0.ɵɵelementStart(21, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function CreateLobbyComponent_Template_button_click_21_listener() {\n          return ctx.createLobby();\n        });\n        i0.ɵɵtext(22, \" Create Lobby \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.lobbyForm);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngIf\", ctx.lobbyForm.controls[\"lobbyName\"].errors == null ? null : ctx.lobbyForm.controls[\"lobbyName\"].errors[\"nameTaken\"]);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i7.NgIf, i5.MatError, i8.MatButton],\n    styles: [\".button-neu[_ngcontent-%COMP%]{margin-top:15px;margin-bottom:15px;color:#000;background:linear-gradient(145deg,#cacaca,#f0f0f0);box-shadow:12px 12px 20px #989898,-12px -12px 20px #fff}.center-button[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;margin:auto}.container-centered[_ngcontent-%COMP%]{text-align:center}\"]\n  });\n  return CreateLobbyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}